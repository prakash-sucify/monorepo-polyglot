# Secrets Rotation Configuration
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secrets-rotation
  namespace: monorepo-polyglot
spec:
  schedule: "0 2 * * 0"  # Every Sunday at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: secrets-rotation
            image: vault:latest
            command:
            - /bin/sh
            - -c
            - |
              # Rotate JWT secret
              echo "Rotating JWT secret..."
              NEW_JWT_SECRET=$(openssl rand -base64 32)
              vault kv put secret/auth jwt_secret="$NEW_JWT_SECRET"
              
              # Rotate database password
              echo "Rotating database password..."
              NEW_DB_PASSWORD=$(openssl rand -base64 32)
              vault kv put secret/database password="$NEW_DB_PASSWORD"
              
              # Restart services to pick up new secrets
              kubectl rollout restart deployment/auth-deployment -n monorepo-polyglot
              kubectl rollout restart deployment/postgres-deployment -n monorepo-polyglot
              
              echo "Secrets rotation completed"
            env:
            - name: VAULT_ADDR
              value: "https://vault.yourdomain.com"
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: vault-token
                  key: token
          restartPolicy: OnFailure
---
# Secrets Backup Job
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secrets-backup
  namespace: monorepo-polyglot
spec:
  schedule: "0 1 * * *"  # Daily at 1 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: secrets-backup
            image: vault:latest
            command:
            - /bin/sh
            - -c
            - |
              # Backup secrets to encrypted storage
              echo "Backing up secrets..."
              TIMESTAMP=$(date +%Y%m%d_%H%M%S)
              
              # Export secrets
              vault kv get -format=json secret/auth > /backup/auth_$TIMESTAMP.json
              vault kv get -format=json secret/database > /backup/database_$TIMESTAMP.json
              vault kv get -format=json secret/payment > /backup/payment_$TIMESTAMP.json
              vault kv get -format=json secret/ai > /backup/ai_$TIMESTAMP.json
              vault kv get -format=json secret/email > /backup/email_$TIMESTAMP.json
              
              # Encrypt backup
              tar -czf /backup/secrets_backup_$TIMESTAMP.tar.gz /backup/*_$TIMESTAMP.json
              gpg --symmetric --cipher-algo AES256 /backup/secrets_backup_$TIMESTAMP.tar.gz
              
              # Upload to secure storage (S3, etc.)
              # aws s3 cp /backup/secrets_backup_$TIMESTAMP.tar.gz.gpg s3://your-secrets-backup-bucket/
              
              # Clean up local files
              rm /backup/*_$TIMESTAMP.json
              rm /backup/secrets_backup_$TIMESTAMP.tar.gz
              
              echo "Secrets backup completed"
            env:
            - name: VAULT_ADDR
              value: "https://vault.yourdomain.com"
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: vault-token
                  key: token
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: secrets-backup-pvc
          restartPolicy: OnFailure
---
# Backup PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: secrets-backup-pvc
  namespace: monorepo-polyglot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
